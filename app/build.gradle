/*
 * Copyright (c) 2017 Proton Technologies AG
 *
 * This file is part of ProtonVPN.
 *
 * ProtonVPN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ProtonVPN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
 */
import com.android.build.api.dsl.ApplicationBuildType
import com.android.build.api.dsl.VariantDimension
import com.android.build.gradle.internal.dsl.BaseFlavor
import configuration.EnvironmentConfigSettings
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.json.StringEscapeUtils
import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
}

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '3.7.0'
    id 'io.sentry.android.gradle' version '3.14.0'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'me.proton.core.gradle-plugins.environment-config' version '1.3.1'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'jacoco'
apply plugin: 'com.jaredsburrows.license'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'me.proton.core.gradle-plugins.environment-config'

jacoco {
    toolVersion = '0.8.8'
}

// There is no dependency on unit tests because coverage is run in a separate CI job and we want to
// avoid building and running the tests again.
task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', 'ch.protonmail.android.utils.nativelib']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/blackGooglePlayStoreDebug", excludes: fileFilter)
    def mainSrc = files(["src/main/java","src/google/java"])
    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([debugTree])
    executionData.setFrom fileTree(dir: "$project.projectDir", includes: [
            "**/*.exec",
            "**/*.ec"
    ])
    afterEvaluate {
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/ch/protonmail/**')
        })
    }
}
task coverageReport() {
    dependsOn jacocoTestReport

    def reportFile = project.file("build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    inputs.file(reportFile)

    doLast {
        def slurper = new XmlSlurper()
        slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xml = slurper.parse(reportFile)
        def counter = xml.counter.find {
            node -> node.@type == 'INSTRUCTION'
        }
        def missed = counter.@missed.toDouble()
        def covered = counter.@covered.toDouble()
        def total = missed + covered
        def percentage = covered / total * 100

        printf "Missed %.2f branches%n", missed
        printf "Covered %.2f branches%n", covered
        printf "Total coverage: %.2f%%%n", percentage
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task updateLicensesJson(dependsOn: 'licenseProductionGooglePlayStoreReleaseReport') {
    doLast {
        File json = new File("$project.projectDir/build/reports/licenses/licenseProductionGooglePlayStoreReleaseReport.json")
        File out = new File("$project.projectDir/src/main/assets/open_source_licenses.js")
        out.text = 'dependencies = ' + json.text
    }
}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = false
    generateJsonReport = true
    copyHtmlReportToAssets = false
    copyJsonReportToAssets = false
}

def storeKeyAlias = project.hasProperty('keyStoreKeyAlias') ? keyStoreKeyAlias : 'proton'
def storePass = project.hasProperty('keyStorePassword') ? keyStorePassword : "\"Store password\""
def storeKeyPass = project.hasProperty('keyStoreKeyPassword') ? keyStoreKeyPassword : "\"Store key password\""
def sentryDsn = project.hasProperty('sentryDsn') ? sentryDsn : ""
def accountSentryDsn = System.getenv("ACCOUNT_SENTRY_DSN") ?: ""
def preferencesSalt = project.hasProperty('preferencesSalt') ? preferencesSalt : "\"Salt\""
def preferencesKey = project.hasProperty('preferencesKey') ? preferencesKey : "\"Key\""
def serviceAccountCredentialsPath = project.hasProperty('serviceAccountFilePath') ? serviceAccountFilePath : "service_account.json"
def testAccountPassword = project.hasProperty('testAccountPassword') ? testAccountPassword : "\"Pass\""
def appId = project.hasProperty('appId') ? appId : "ch.protonvpn.android"
def supportedLocales = ['b+es+419', 'be', 'cs', 'de', 'el', 'en', 'es-rES', 'es-rMX', 'fa', 'fi', 'fr', 'hr', 'in', 'it', 'ja', 'ka', 'ko', 'nb-rNO', 'nl', 'pl', 'pt-rBR', 'pt-rPT', 'ro', 'ru', 'sk', 'sl', 'sv-rSE', 'tr', 'uk', 'zh-rTW']
def redesignTestBuild = project.hasProperty('redesignTestBuild') ? project.redesignTestBuild.toBoolean() : false
def allowLogcat = System.getenv("ALLOW_LOGCAT") ? System.getenv("ALLOW_LOGCAT").toBoolean() : false
def helpers = new Helpers(rootDir)

android {
    namespace "com.protonvpn.android"
    testNamespace 'com.protonvpn'
    buildToolsVersion "34.0.0"
    ndkVersion rootProject.ext.compileNdkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    useLibrary 'org.apache.http.legacy'
    signingConfigs {
        release {
            storeFile file(rootProject.ext.keyStoreFilePath)
            storePassword storePass
            keyAlias storeKeyAlias
            keyPassword storeKeyPass
        }
    }
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId appId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion 33
        multiDexEnabled true
        versionName helpers.fullVersionName
        versionCode helpers.getVersionCode()
        archivesBaseName = helpers.archivesBaseName
        testInstrumentationRunner "com.protonvpn.TestsRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true' // Clear app data between tests.
        testInstrumentationRunnerArguments useTestStorageService: 'true'
        vectorDrawables.useSupportLibrary = true
        resourceConfigurations = supportedLocales

        def availableLocalesJava = supportedLocales.collect { "\"$it\"" }.join(", ")
        buildConfigField "String[]", "SUPPORTED_LOCALES", "{$availableLocalesJava}"

        buildConfigField "String", "Sentry_DSN",  "\"${StringEscapeUtils.escapeJava(sentryDsn)}\""
        buildConfigField "String", "ACCOUNT_SENTRY_DSN",  "\"${StringEscapeUtils.escapeJava(accountSentryDsn)}\""
        buildConfigField "String", "PREF_SALT",  preferencesSalt
        buildConfigField "String", "PREF_KEY",  preferencesKey
        buildConfigField "String", "TEST_ACCOUNT_PASSWORD",  "\"Pass\""
        def ciBranchName = System.getenv("CI_COMMIT_BRANCH")
        def commitFirstLine = System.getenv("CI_COMMIT_MESSAGE")?.split('\n')?.first()?.trim()
        def specialCharPass = System.getenv("SPECIAL_CHAR_PASSWORD")
        buildConfigField "String", "SPECIAL_CHAR_PASSWORD",  "\"${StringEscapeUtils.escapeJava(specialCharPass)}\""
        buildConfigField "String", "CI_BRANCH_NAME", "\"${StringEscapeUtils.escapeJava(ciBranchName)}\""
        buildConfigField "String", "CI_COMMIT_MESSAGE", "\"${StringEscapeUtils.escapeJava(commitFirstLine)}\""
        buildConfigField "String", "TEST_ASSET_OVERRIDE_SHA", "\"${helpers.readFileOrDefault("test_asset_override_sha", "db95210d57b90063bfa1cac9881c7a8df326e6e2")}\""
        buildConfigField "String", "TEST_ASSET_OVERRIDE_KEY", "\"${helpers.readFileOrDefault("test_asset_override_key", "241b080fb0f1216e")}\""
        buildConfigField "String", "TEST_SUITE_ASSET_OVERRIDE_KEY", "\"${helpers.readFileOrDefault("test_suite_asset_override_key", "3ea60f6a2fbfc015")}\""
        buildConfigField "Boolean", "ALT_ROUTING_CERT_FOR_MAIN_ROUTE", "false"
        buildConfigField "Boolean", "ALLOW_LOGCAT", "false"
        buildConfigField "String[]", "API_TLS_PINS", "null"
        buildConfigField "String[]", "API_ALT_TLS_PINS", "null"
        buildConfigField "String[]", "DOH_SERVICES_URLS", "null"
        buildConfigField "String", "VPN_SERVER_ROOT_CERT", "null"

        Helpers.setAssetLinksResValue(it, "proton.me")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        if (redesignTestBuild) {
            applicationIdSuffix '.testing'
        }
        buildConfigField "Boolean", "REDESIGN_TEST_BUILD", redesignTestBuild.toString()
        manifestPlaceholders.enableUiCatalog = redesignTestBuild.toString()
    }
    flavorDimensions = ["environment", "functionality", "distribution"]
    productFlavors {
        production {
            dimension "environment"
            getIsDefault().set(true)

            helpers.protonEnvironmentConfig(it) {
                // default host is 'proton.me'
                apiPrefix = 'vpn-api'
            }
        }
        black {
            dimension "environment"
            versionNameSuffix '-dev'

            def blackToken = System.getenv("BLACK_TOKEN")
            // Use either:
            //  - TEST_ENV_DOMAIN for regular test environments,
            //  - the BTI_* variables for the BTI environment.
            def testEnvHost = System.getenv("TEST_ENV_DOMAIN")
            def dohUrls, apiPinsString, altPinsString, altRoutingCertForMainRoute, customApiHost, customPrefix, customHv3Host

            if (testEnvHost != null) {
                dohUrls = null
                // Disable cert pinning:
                apiPinsString = "{}"
                altPinsString = "{}"
                altRoutingCertForMainRoute = false

                customApiHost = testEnvHost
            }
            else {
                def apiPins = System.getenv("BTI_API_TLS_PINNINGS")
                def altPins = System.getenv("BTI_ALT_ROUTE_TLS_PINNINGS")
                dohUrls = System.getenv("BTI_AR_DOH_URLS")
                apiPinsString = "{${helpers.sanitizeStringListForBuildConfig(apiPins)}}"
                altPinsString = altPins != null ? "{${helpers.sanitizeStringListForBuildConfig(altPins)}}" : null
                altRoutingCertForMainRoute = true

                customPrefix = System.getenv("BTI_PREFIX")
                customApiHost = System.getenv("BTI_HOST")
                customHv3Host = System.getenv("BTI_HV3_DOMAIN")
            }

            helpers.protonEnvironmentConfig(it) {
                if (customApiHost != null)
                    host = StringEscapeUtils.escapeJava(customApiHost)
                if (customPrefix != null)
                    apiPrefix = StringEscapeUtils.escapeJava(customPrefix)
                if (customHv3Host != null)
                    hv3Host = StringEscapeUtils.escapeJava(customHv3Host)
                proxyToken = StringEscapeUtils.escapeJava(blackToken)
            }

            if (customApiHost != null) {
                Helpers.setAssetLinksResValue(it, customApiHost)
            }

            def vpnServerRootCert = System.getenv("BTI_SERVERS_ROOT_CERT")
            buildConfigField "Boolean", "ALT_ROUTING_CERT_FOR_MAIN_ROUTE", "$altRoutingCertForMainRoute"
            buildConfigField "String[]", "DOH_SERVICES_URLS", "{${helpers.sanitizeStringListForBuildConfig(dohUrls)}}"
            buildConfigField "String[]", "API_TLS_PINS", apiPinsString

            // Below are not mandatory
            if (altPinsString != null) {
                buildConfigField "String[]", "API_ALT_TLS_PINS", altPinsString
            }
            if (vpnServerRootCert != null) {
                buildConfigField "String", "VPN_SERVER_ROOT_CERT", "\"${StringEscapeUtils.escapeJava(vpnServerRootCert)}\""
            }
        }
        def additionalProguard =  "proguard-rules-logcat.pro"
        vanilla {
            dimension "functionality"
        }
        google {
            dimension "functionality"
            getIsDefault().set(true)
        }

        playStore {
            dimension "distribution"
            getIsDefault().set(true)
            buildConfigField "String", "STORE_SUFFIX", "\"+play\""
            proguardFile additionalProguard
        }

        amazon {
            dimension "distribution"
            buildConfigField "String", "STORE_SUFFIX", "\"+aws\""
            proguardFile additionalProguard
        }
        direct {
            dimension "distribution"
            buildConfigField "String", "STORE_SUFFIX", "\"+apk\""
            proguardFile additionalProguard
        }
        openSource {
            dimension "distribution"
            buildConfigField "String", "STORE_SUFFIX", "\"+os\""
            proguardFile additionalProguard
        }
        dev {
            dimension "distribution"
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            buildConfigField "String", "STORE_SUFFIX", "\"\""
            buildConfigField "Boolean", "ALLOW_LOGCAT", "true"
        }
    }
    variantFilter { variant ->
        def environment = variant.flavors[0].name
        def functionality = variant.flavors[1].name
        def dist = variant.flavors[2].name

        if (dist == "dev")
            return
        if (environment == "black" && dist !in ["playStore", "direct"])
            setIgnore(true) // We don't need all distributions for testing.
        if (functionality == "google" && dist != "playStore" || functionality != "google" && dist == "playStore")
            setIgnore(true)
    }

    buildTypes {
        debug {
            buildConfigField "String", "TEST_ACCOUNT_PASSWORD",  testAccountPassword
            enableAndroidTestCoverage false
            enableUnitTestCoverage = true
            ext.alwaysUpdateBuildId = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders.enableUiCatalog = true
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    packagingOptions {
        resources {
            excludes += [
                    'DebugProbesKt.bin',
                    'META-INF/DEPENDENCIES.txt',
                    'META-INF/NOTICE.txt',
                    'META-INF/NOTICE.md',
                    'META-INF/LICENSE*',
                    'META-INF/DEPENDENCIES',
                    'META-INF/notice.txt',
                    'META-INF/license.txt',
                    'META-INF/dependencies.txt',
                    'META-INF/LGPL2.1',
                    'META-INF/AL2.0',
                    'MANIFEST.MF'
            ]
        }
        jniLibs {
            useLegacyPackaging = true
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
    sourceSets {
        main.res.srcDirs += 'src/main/res_flags'
        main {
           assets.srcDirs = ['src/main/assets', 'assets', 'ovpnlibs/assets', '../openvpn/build/ovpnassets']
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled = true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
    lint {
        // In our process we might temporairly have extra translations that will get removed on
        // next update.
        disable 'ExtraTranslation'
    }
}

kapt {
    correctErrorTypes true
}

play {
    serviceAccountCredentials.set(file(serviceAccountCredentialsPath))
    track.set('internal')
    artifactDir.set(file("signedBundle/"))
    defaultToAppBundles.set(true)
    releaseName.set(helpers.fullVersionName)
}

// The config file is downloaded by the downloadDetektConfig task.
def commonDetektConfigPath = "${rootProject.projectDir}/config/detekt/config.yml"
def projectDetektConfigPath = "${rootProject.projectDir}/config/detekt/custom-config.yml"
detekt {
    config = files(commonDetektConfigPath, projectDetektConfigPath)
    reports {
        html.required.set(false)
        xml.required.set(false)
        txt.required.set(false)
        sarif.required.set(false)
        custom {
            reportId = "outputreport.GitlabQualityOutputReport"
            outputLocation.set(file("build/reports/detekt/detekt.json"))
        }
    }
}

sentry {
    // This configuration uploads mapping files to Sentry and requires credentials either in a
    // local file or environment variables.
    // To disable the upload temporarily (e.g. when building locally) add "release" to
    // ignoredBuildTypes (I wish there was a better way...).
    includeProguardMapping = true
    uploadNativeSymbols = true
    ignoredBuildTypes = ["debug"]
    // It would be best to set only the single dimension "openSource" but it doesn't work this way.
    ignoredFlavors = ["productionVanillaOpenSource"]

    // We don't want the sentry plugin to add anything to our builds:
    tracingInstrumentation { enabled = false }
    autoInstallation { enabled = false }
}

tasks.withType(Detekt).configureEach {
    dependsOn "downloadDetektConfig"
    dependsOn ":detekt-custom-rules:assemble"
    dependsOn ":detekt-gitlab-output-plugin:assemble"

    basePath = rootProject.projectDir.absolutePath
    reports {
        html.required.set(false)
        xml.required.set(false)
        txt.required.set(false)
        sarif.required.set(false)
        custom {
            reportId = "GitlabQualityOutputReport"
            outputLocation.set(file("build/reports/detekt/detekt.json"))
        }
    }
}

task downloadDetektConfig {
    doLast {
        def srcConfigFilePath = "config/detekt/config.yml"
        def dstConfigFile = file(commonDetektConfigPath)

        def dir = dstConfigFile.parentFile
        if (!dir.exists() && !dir.mkdirs()) {
            throw FilePermissionException("Cannot create directory ${dir.canonicalPath}")
        }

        println("Detekt rule-set file: $dstConfigFile")
        def fileModificationDate = new Date(dstConfigFile.lastModified())
        if (fileModificationDate.plus(1) > new Date()) {
            println("Detekt rule-set is less than a day old, skipping download.")
            return
        }

        def url = "https://raw.githubusercontent.com/ProtonMail/protoncore_android/master/$srcConfigFilePath"
        println("Fetching Detekt rule-set from $url")
        try {
            def content = new URL(url).getText()
            // Checking start of the file is enough, if some part is missing we would not be able to decode it
            assert(content.startsWith("# Integrity check *")) : "Integrity check not passed"

            dstConfigFile.text = content

        } catch (Throwable t) {
            println("Cannot download Detekt configuration: ${t.message}")
            throw t
        }
    }
}

task generateReleaseNotesForPublishing {
    doLast {
        File releaseNotesDir = new File("$project.projectDir/src/main/play/release-notes/en-US")
        releaseNotesDir.mkdirs()
        File releaseNotesFile = new File(releaseNotesDir, "default.txt")
        releaseNotesFile.newWriter().withWriter { w ->
            // Limit of 500 chars on Google Play console for release notes
            w << helpers.getReleaseNotes(490)
        }
    }
}

task prepareGuestHoleServers {
    doLast {
        def guestHoleUrl = System.getenv("GUEST_HOLE_URL")
        if (guestHoleUrl == null) {
            copy {
                from "$project.projectDir/config/GuestHoleServers.json"
                into "$project.projectDir/src/main/assets"
            }
        } else {
            def allServers = new JsonSlurper().parse(new URL(guestHoleUrl))["LogicalServers"]
            def candidateServers = allServers.stream().filter { s ->
                def country = s["ExitCountry"]
                def secureCore = (s["Features"] & 1) == 1
                !secureCore && s["Status"] == 1 && !country.equalsIgnoreCase("se") && !country.equalsIgnoreCase("is")
            }.collect()
            Collections.shuffle(candidateServers)
            def servers = candidateServers.take(10)

            File dir = new File("$project.projectDir/src/main/assets")
            File serversFile = new File(dir, "GuestHoleServers.json")
            serversFile.newWriter().withWriter { w ->
                w << JsonOutput.prettyPrint(new JsonOutput().toJson(servers))
            }
        }
    }
}

tasks.withType(Test).configureEach {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
    }
}

preBuild.dependsOn prepareGuestHoleServers

import org.gradle.internal.extensibility.DefaultExtraPropertiesExtension

class Helpers {
    private File workingDir

    Helpers(File workingDir) {
        this.workingDir = workingDir
    }

    // Versioning:
    //  Version name: M.m.D.R
    //  M.m (major.minor) come from the last tag on development branch of this form (e.g. "2.1")
    //  D - number of commits on development since M.m
    //  R - number of commits on release branch (from development)
    //  Version code: AMMmmDDRR as decimal integer
    //  A - hardcoded number 6. Because abi splits were used before
    int getVersionCode() {
        def name = fullVersionName
        def versions = name.split("\\.")
        def major = versions[0].toInteger()
        def minor = versions[1].toInteger()
        def dev = versions[2].toInteger()
        def release = versions[3].toInteger()

        // Max version code allowed by android is 2_000_000_000
        assert major < 100 && minor < 100 && dev < 100 && release < 100

        // 6 needs to be hardcoded as abi version before ended up at 5
        def code = 6 * 100_000_000 +
                major * 1_000_000 +
                minor*10_000 +
                dev * 100 +
                release

        // Just some sanity check because there's no turning back once we accidentally publish
        // some large version code
        assert code < 700_000_000 && major < 50

        return code
    }

    String getFullVersionName() {
        // To be used e.g. when we don't want the version on hotfix branch to change when adding
        // CI-related fixes.
        def override = System.getenv("OVERRIDE_VERSION_NAME")
        if (override != null)
            return override

        // Find last tag in the form M.m.D.R, D and R are optional
        def tag = exec('git tag --sort=v:refname --merged HEAD').trim().split('\n').reverse().find { it.matches('\\d+(\\.\\d+){1,3}') }
        def tagSplit = Arrays.stream(tag.split("\\.")).mapToInt { it.toInteger() }.toArray()
        def major = tagSplit[0]
        def minor = tagSplit[1]
        def dev = tagSplit.size() > 2 ? tagSplit[2] : 0
        def release = tagSplit.size() > 3 ? tagSplit[3] : 0

        def onMaster = System.getenv("CI_COMMIT_BRANCH") == "master" ||
                exec("git rev-parse --abbrev-ref HEAD").trim() == "master"
        // On master or public repo just use last tag for version name
        if (!onMaster && exec("git rev-parse --verify origin/development", false) != null) {
            // Tag is on development
            if (exec("git merge-base --is-ancestor ${tag} origin/development", false) != null) {
                def branchPoint = exec("git merge-base origin/development HEAD").trim()
                // add #commits from tag to branch point with development to dev
                dev += exec("git rev-list --count ${tag}..${branchPoint}").trim().toInteger()
                // add #commits from branch point to HEAD to release
                release += exec("git rev-list --count origin/development..HEAD").trim().toInteger()
            } else { // Tag is on current branch
                release += exec("git rev-list --count ${tag}..HEAD").trim().toInteger()
            }
        }
        return "${major}.${minor}.${dev}.${release}"
    }

    String readFileOrDefault(String path, String defaultValue) {
        def file = new File(workingDir, path)
        if (!file.exists())
            return defaultValue
        return file.text
    }

    boolean hasReleaseNotes() {
        def lastSha = System.getenv("CI_COMMIT_BEFORE_SHA")
        def branchName = System.getenv("CI_COMMIT_BRANCH")
        def output = exec(["git", "branch", branchName, "--contains", lastSha], false)
        return output != null
    }

    String getReleaseNotes(int trimAt) {
        def lastSha = System.getenv("CI_COMMIT_BEFORE_SHA")
        // CI_COMMIT_BEFORE_SHA is always 0000000000000000000000000000000000000000 for merge request
        // pipelines, the first commit in pipelines for branches or tags, or when manually running a
        // pipeline. Let's not fail the job if we ever need to run a pipeline manually to fix
        // publishing.
        if (lastSha == null || lastSha == "0000000000000000000000000000000000000000")
            return "(failed fetching release notes for manual pipeline)"
        def notes = exec(["git", "log", "${lastSha}..HEAD", "--pretty=format:- %s"])
        if (notes.length() > trimAt)
            return notes.take(trimAt) + "\n..."
        return notes
    }

    void notifyPublishOnSlack() {
        def hook = System.getenv("SLACK_PUBLISH_HOOK")
        if (hook == null)
            return
        def sha = System.getenv("CI_COMMIT_SHA")
        def json = new JsonOutput().toJson(["text": ":android: :protonvpn: ${getFullVersionName()} released to internal (SHA ${sha.take(8)}...)\n" +
                "Release notes:\n" +
                "${getReleaseNotes(1000)}"])
        exec(["curl", "-X", "POST", "-H", "'Content-type: application/json'", "--data", json, hook])
    }

    String getArchivesBaseName() {
        return "ProtonVPN-" + fullVersionName + "(" + getVersionCode() + ")"
    }

    String exec(String cmd, boolean throwOnError = true) {
        def out = new StringBuffer()
        def err = new StringBuffer()
        def proc = cmd.execute(null, workingDir)
        proc.waitForProcessOutput(out, err)
        if (proc.exitValue() != 0) {
            if (throwOnError)
                throw new GradleScriptException("Error executing: ${cmd}", new RuntimeException(err.toString()))
            else
                return null
        }
        return out.toString()
    }

    String exec(ArrayList<String> cmd, boolean throwOnError = true) {
        def out = new StringBuffer()
        def err = new StringBuffer()
        def proc = cmd.execute(null, workingDir)
        proc.waitForProcessOutput(out, err)
        if (proc.exitValue() != 0) {
            if (throwOnError)
                throw new GradleScriptException("Error executing: ${cmd}", new RuntimeException(err.toString()))
            else
                return null
        }
        return out.toString()
    }

    // We receive comma-separated string lists either with or without '"', support both notations
    // and protects from injecting java code.
    static String sanitizeStringListForBuildConfig(String s) {
        if (s == null) return ""
        return s.split(",")
                .collect { it.trim().replace("\"", "") }
                .collect { "\"${StringEscapeUtils.escapeJava(it)}\""}
                .join(", ")
    }

    static void setAssetLinksResValue(VariantDimension variantDimension, String host) {
        variantDimension.resValue(
                /* type */ "string",
                /* name */ "asset_statements",
                /* value */ """
                [{
                  "relation": ["delegate_permission/common.handle_all_urls", "delegate_permission/common.get_login_creds"],
                  "target": { "namespace": "web", "site": "https://$host" }
                }]
                """.stripIndent()
        )
    }

    static void protonEnvironmentConfig(BaseFlavor flavor, Closure<?> configurator) {
        setEnvironmentConfigExt(flavor.ext, flavor.name, configurator)
    }

    static void protonEnvironmentConfig(ApplicationBuildType buildType, Closure<EnvironmentConfigSettings> configurator) {
        setEnvironmentConfigExt(buildType.ext, buildType.name, configurator)
    }

    private static void setEnvironmentConfigExt(
        DefaultExtraPropertiesExtension ext,
        String name,
        Closure<EnvironmentConfigSettings> configurator
    ) {
        def configSettings = new EnvironmentConfigSettings()

        configurator.delegate = configSettings
        configurator.resolveStrategy = Closure.DELEGATE_FIRST
        configurator.call()

        ext.set("""${name}ProtonEnvironmentConfig""", configSettings)
    }
}
tasks.register("getVersionName"){
    doLast {
        println helpers.fullVersionName
    }
}
tasks.register("notifyPublishOnSlack"){
    doLast {
        helpers.notifyPublishOnSlack()
    }
}
tasks.register("getVersionCode"){
    doLast {
        println helpers.getVersionCode()
    }
}
tasks.register("getArchivesName"){
    doLast {
        println archivesBaseName
    }
}
tasks.register("getReleaseNotes"){
    doLast {
        if (helpers.hasReleaseNotes()) {
            println helpers.getReleaseNotes(1000)
        } else {
            println "- Branch rebased"
        }
    }
}

repositories {
    maven { url "https://clojars.org/repo/" }
    google()
    mavenCentral()
}
configurations {
    detekt
}

configurations.configureEach {
    exclude group: "me.proton.core", module: "notification-dagger"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    debugImplementation 'androidx.test.espresso.idling:idling-concurrent:3.5.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.12'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
    detektPlugins project(":detekt-gitlab-output-plugin")
    detektPlugins project(":detekt-custom-rules")

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlin_version"))

    implementation 'androidx.test.espresso:espresso-idling-resource:3.5.1'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.core:core-ktx:1.13.0'
    implementation "androidx.datastore:datastore:$datastore_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_version"
    implementation 'androidx.activity:activity-ktx:1.9.0'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation 'androidx.window:window:1.2.0'
    implementation 'io.sentry:sentry-android:6.34.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.scottyab:aes-crypto:0.0.5'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'me.relex:circleindicator:2.1.6@aar'
    implementation 'androidx.work:work-runtime:2.9.0'
    implementation 'androidx.work:work-runtime-ktx:2.9.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
    implementation 'com.github.lisawray.groupie:groupie:2.10.0'
    implementation 'com.github.lisawray.groupie:groupie-viewbinding:2.10.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.github.tony19:logback-android:2.0.0'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_json_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$kotlinx_serialization_json_version"
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'com.airbnb.android:lottie:6.2.0'
    implementation "com.airbnb.android:lottie-compose:6.2.0"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation "androidx.security:security-crypto:1.0.0"
    implementation "androidx.viewpager2:viewpager2:1.1.0-beta02"
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation 'com.github.seancfoley:ipaddress:5.4.0'

    // Compose
    def composeBom = platform('androidx.compose:compose-bom:2024.05.00')
    implementation composeBom
    androidTestImplementation composeBom
    def composeNavigationVersion = '2.7.7'

    implementation 'androidx.compose.animation:animation-android'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material3:material3-window-size-class'
    implementation "androidx.compose.runtime:runtime-livedata"
    implementation 'androidx.compose.ui:ui'
    implementation "androidx.compose.ui:ui-viewbinding"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.7.0"
    implementation "androidx.navigation:navigation-compose:$composeNavigationVersion"
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.30.1"
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.31.3-beta"

    implementation 'androidx.constraintlayout:constraintlayout-compose-android:1.1.0-alpha13'

    implementation("com.patrykandpatrick.vico:core:2.0.0-alpha.14")
    implementation("com.patrykandpatrick.vico:compose:2.0.0-alpha.14")

    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    testImplementation "androidx.compose.ui:ui-test-junit4"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    testImplementation "androidx.navigation:navigation-testing:$composeNavigationVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$composeNavigationVersion"

    // Play core
    googleImplementation "com.google.android.play:app-update:2.1.0"
    googleImplementation "com.google.android.play:app-update-ktx:2.1.0"
    googleImplementation "com.google.android.play:review:2.0.1"
    googleImplementation "com.google.android.play:review-ktx:2.0.1"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation 'com.github.bumptech.glide:compose:1.0.0-beta01'
    kapt 'com.github.bumptech.glide:compiler:4.16.0'

    // Room
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    // Proton Core libs
    implementation 'me.proton.vpn:go-vpn-lib:0.1.39'
    implementation "me.proton.core:domain:$core_version"
    implementation "me.proton.core:network:$core_version"
    implementation "me.proton.core:notification-data:$core_version"
    implementation "me.proton.core:notification-domain:$core_version"
    implementation "me.proton.core:notification-presentation:$core_version"
    implementation "me.proton.core:util-kotlin:$core_version"
    implementation "me.proton.core:presentation:$core_version"
    implementation "me.proton.core:presentation-compose:$core_version"
    implementation "me.proton.core:push:$core_version"
    implementation "me.proton.core:human-verification-data:$core_version"
    implementation "me.proton.core:human-verification-domain:$core_version"
    implementation "me.proton.core:human-verification-presentation:$core_version"
    implementation "me.proton.core:country:$core_version"
    implementation "me.proton.core:user:$core_version"
    implementation "me.proton.core:user-data:$core_version"
    implementation "me.proton.core:user-recovery:$core_version"
    implementation "me.proton.core:user-settings:$core_version"
    implementation "me.proton.core:account:$core_version"
    implementation "me.proton.core:account-manager-data:$core_version"
    implementation "me.proton.core:account-manager-domain:$core_version"
    implementation "me.proton.core:account-manager-presentation:$core_version"
    implementation "me.proton.core:account-manager-presentation-compose:$core_version"
    implementation "me.proton.core:account-recovery:$core_version"
    implementation "me.proton.core:auth:$core_version"
    implementation "me.proton.core:challenge:$core_version"
    implementation "me.proton.core:crypto:$core_version"
    implementation "me.proton.core:crypto-validator:$core_version"
    implementation "me.proton.core:domain:$core_version"
    implementation "me.proton.core:event-manager:$core_version"
    implementation "me.proton.core:feature-flag:$core_version"
    implementation "me.proton.core:observability:$core_version"
    implementation "me.proton.core:telemetry-data:$core_version"
    implementation "me.proton.core:telemetry-domain:$core_version"
    implementation "me.proton.core:payment:$core_version"
    googleImplementation "me.proton.core:payment-iap:$core_version"
    implementation "me.proton.core:plan:$core_version"
    implementation "me.proton.core:key:$core_version"
    implementation "me.proton.core:data:$core_version"
    implementation "me.proton.core:data-room:$core_version"
    implementation "me.proton.core:util-android-dagger:$core_version"
    implementation "me.proton.core:util-android-datetime:$core_version"
    implementation "me.proton.core:util-android-sentry:$core_version"
    implementation "me.proton.core:util-android-shared-preferences:$core_version"
    implementation "me.proton.core:configuration-data:$core_version"
    debugImplementation "me.proton.core:configuration-dagger-content-resolver:$core_version"
    releaseImplementation "me.proton.core:configuration-dagger-staticdefaults:$core_version"

    androidTestImplementation "me.proton.core:test-quark:$core_version"
    androidTestImplementation("me.proton.core:account-recovery-test:$core_version")
    testImplementation "me.proton.core:auth-test:$core_version"
    androidTestImplementation "me.proton.core:auth-test:$core_version"
    androidTestImplementation "me.proton.core:plan-test:$core_version"
    androidTestImplementation "me.proton.core:notification-test:$core_version"
    androidTestImplementation "me.proton.core:user-recovery-test:$core_version"


    testImplementation("me.proton.core:test-kotlin:$core_version") {
        // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    androidTestImplementation("me.proton.core:test-kotlin:$core_version") {
        // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
        // Use mockk-android from our own dependencies.
        exclude group: "io.mockk", module: "mockk"
    }

    androidTestImplementation("me.proton.core:test-android-instrumented:$core_version") {
        exclude group: "me.proton.core"
    }
    // Enforce org.checkerframework:checker's version to avoid duplicate classes.
    // See https://github.com/android/android-test/issues/861 for more info.
    // The problematic version is being pulled in by:
    // com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework:3.1
    androidTestImplementation('org.checkerframework:checker') {
        version {
            strictly '3.11.0'
        }
    }

    // Observability
    implementation project(":observability:domain")

    // TV
    implementation "androidx.leanback:leanback:1.1.0-rc02"
    implementation "androidx.leanback:leanback-preference:1.1.0-rc01"
    implementation 'com.caverock:androidsvg-aar:1.4'

    // Wireguard
    implementation 'me.proton.vpn:wireguard-android:1.0.20230512.17'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // Hilt
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    // Hilt for WorkManager
    implementation 'androidx.hilt:hilt-work:1.2.0'
    kapt 'androidx.hilt:hilt-compiler:1.2.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation 'org.robolectric:robolectric:4.12.1'
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version") {
        // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    androidTestImplementation 'androidx.lifecycle:lifecycle-runtime-testing:2.7.0'
    androidTestImplementation('androidx.test.espresso:espresso-idling-resource:3.5.1') {
        exclude module: 'support-annotations'
    }

    // Core library
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version"
    // debugImplementation as a workaround for ActivityScenario problem:
    // https://github.com/android/android-test/issues/940#issuecomment-934406022
    debugImplementation 'androidx.test:core:1.5.0'

    testImplementation project(':shared-test-code')
    androidTestImplementation project(':shared-test-code')

    androidTestImplementation 'com.squareup.okhttp3:okhttp-tls:4.12.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
    androidTestUtil 'androidx.test.services:test-services:1.4.2'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:truth:1.5.0'
    androidTestImplementation 'com.google.truth:truth:1.1.5'
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"

    // Espresso dependencies
    testImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.5.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'

    // Fusion
    testImplementation "me.proton.test:fusion:0.9.62"
    androidTestImplementation "me.proton.test:fusion:0.9.62"

    implementation project(path: ':openvpn')
}
