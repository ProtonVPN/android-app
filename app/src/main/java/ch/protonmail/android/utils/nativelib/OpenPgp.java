// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

package ch.protonmail.android.utils.nativelib;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

import androidx.annotation.NonNull;

/**
 * open_pgp_key_manager = interface +c {
 * static create_instance() : open_pgp_key_manager;
 * }
 * generat new key with email address. Fix the UserID issue in protonmail system. on Feb 28, 17
 * static generate_key_with_email(email : string, passphrase : string, bits : i32) : open_pgp_key;
 * generate new key
 * static generate_new_key(user_id : string, email : string, passphrase : string, bits : i32) : open_pgp_key;
 */
public abstract class OpenPgp {

    /**
     * add a new address into addresses list
     */
    public abstract boolean addAddress(@NonNull Address address);

    /**
     * remove a exsit address from the list based on address id
     */
    public abstract boolean removeAddress(@NonNull String addressId);

    /**
     * clean address list
     */
    public abstract boolean cleanAddresses();

    /**
     * generat new key pair
     */
    @NonNull
    public abstract OpenPgpKey generateKey(@NonNull String userName, @NonNull String domain,
                                           @NonNull String passphrase, int bits);

    /**
     * old functions blow
     * update the information carried in the packet. //TODO need add more parameters
     */
    public abstract void updatePrivateInfo(@NonNull String privateKey);

    /**
     * encrypt message
     */
    @NonNull
    public abstract String encryptMessage(@NonNull String addressId, @NonNull String plainText);

    @NonNull
    public abstract String encryptMessageSingleKey(@NonNull String publicKey, @NonNull String plainText);

    @NonNull
    public abstract String decryptMessage(@NonNull String encryptText, @NonNull String passphras);

    @NonNull
    public abstract String decryptMessageSingleKey(@NonNull String encryptText, @NonNull String privateKey,
                                                   @NonNull String passphras);

    @NonNull
    public abstract EncryptPackage encryptAttachment(@NonNull String addressId, @NonNull byte[] unencryptData,
                                                     @NonNull String fileName);

    @NonNull
    public abstract EncryptPackage encryptAttachmentSingleKey(@NonNull String publicKey,
                                                              @NonNull byte[] unencryptData,
                                                              @NonNull String fileName);

    @NonNull
    public abstract byte[] decryptAttachment(@NonNull byte[] key, @NonNull byte[] data,
                                             @NonNull String passphras);

    @NonNull
    public abstract byte[] decryptAttachmentSingleKey(@NonNull byte[] key, @NonNull byte[] data,
                                                      @NonNull String privateKey, @NonNull String passphras);

    @NonNull
    public abstract byte[] decryptAttachmentWithPassword(@NonNull byte[] key, @NonNull byte[] data,
                                                         @NonNull String password);

    @NonNull
    public abstract byte[] getPublicKeySessionKey(@NonNull byte[] keyPackage, @NonNull String passphrase);

    @NonNull
    public abstract byte[] getPublicKeySessionKeySingleKey(@NonNull byte[] keyPackage,
                                                           @NonNull String privateKey,
                                                           @NonNull String passphrase);

    @NonNull
    public abstract byte[] getSymmetricSessionKey(@NonNull byte[] keyPackage, @NonNull String password);

    @NonNull
    public abstract byte[] getNewPublicKeyPackage(@NonNull byte[] session, @NonNull String publicKey);

    @NonNull
    public abstract byte[] getNewSymmetricKeyPackage(@NonNull byte[] session, @NonNull String password);

    @NonNull
    public abstract String encryptMessageAes(@NonNull String plainText, @NonNull String password);

    @NonNull
    public abstract String decryptMessageAes(@NonNull String encryptedMessage, @NonNull String password);

    @NonNull
    public abstract String encryptMailboxPwd(@NonNull String unencryptedPwd, @NonNull String salt);

    @NonNull
    public abstract String decryptMailboxPwd(@NonNull String encryptedPwd, @NonNull String salt);

    @NonNull
    public abstract String readClearsignedMessage(@NonNull String signedMessage);

    /**
     * test functions
     */
    public abstract int throwAnException();

    /**
     * PBE
     */
    @NonNull
    public abstract String encryptHashCbc(@NonNull String plainText, @NonNull String password);

    @NonNull
    public abstract String decryptHashCbc(@NonNull String encryptedText, @NonNull String password);

    /**
     * create and init an instance those instance have addresses manager build in
     * if want deal with single key should use the static functions
     */
    public static native OpenPgp createInstance();

    /**
     * create and init an instance with addresses
     */
    public static native OpenPgp createInstanceWithAddress(@NonNull Address address);

    public static native OpenPgp createInstanceWithAddresses(@NonNull ArrayList<Address> address);

    /**
     * update single private key password
     */
    @NonNull
    public static native String updateSinglePassphrase(@NonNull String privateKey,
                                                       @NonNull String oldPassphrase,
                                                       @NonNull String newPassphrase);

    /**
     * disable/enable debug model
     */
    public static native void enableDebug(boolean isDebug);

    /**
     * check is private key passphrase ok
     */
    public static native boolean checkPassphrase(@NonNull String privateKey, @NonNull String passphrase);

    /**
     * update multiple pgp private keys return are new keys
     */
    @NonNull
    public static native ArrayList<OpenPgpKey> updateKeysPassphrase(
        @NonNull ArrayList<OpenPgpKey> privateKeys, @NonNull String oldPassphrase,
        @NonNull String newPassphrase);

    /**
     * decrypt message use the address key ring with password
     */
    @NonNull
    public static native String decryptMessageWithAddress(@NonNull Address address,
                                                          @NonNull String encryptText,
                                                          @NonNull String passphras);

    /**
     * decrypt attachment use the address key ring with password
     */
    @NonNull
    public static native byte[] decryptAttachmentWithAddress(@NonNull Address address, @NonNull byte[] key,
                                                             @NonNull byte[] data, @NonNull String passphras);

    /**
     * Random bits
     */
    @NonNull
    public static native byte[] randomBits(int bits);

    private static final class CppProxy extends OpenPgp {

        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef) {
            if (nativeRef == 0) {
                throw new RuntimeException("nativeRef is zero");
            }
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);

        public void destroy() {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) {
                nativeDestroy(this.nativeRef);
            }
        }

        protected void finalize() throws java.lang.Throwable {
            destroy();
            super.finalize();
        }

        @Override
        public boolean addAddress(Address address) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addAddress(this.nativeRef, address);
        }

        private native boolean native_addAddress(long _nativeRef, Address address);

        @Override
        public boolean removeAddress(String addressId) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_removeAddress(this.nativeRef, addressId);
        }

        private native boolean native_removeAddress(long _nativeRef, String addressId);

        @Override
        public boolean cleanAddresses() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_cleanAddresses(this.nativeRef);
        }

        private native boolean native_cleanAddresses(long _nativeRef);

        @Override
        public OpenPgpKey generateKey(String userName, String domain, String passphrase, int bits) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateKey(this.nativeRef, userName, domain, passphrase, bits);
        }

        private native OpenPgpKey native_generateKey(long _nativeRef, String userName, String domain,
                                                     String passphrase, int bits);

        @Override
        public void updatePrivateInfo(String privateKey) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updatePrivateInfo(this.nativeRef, privateKey);
        }

        private native void native_updatePrivateInfo(long _nativeRef, String privateKey);

        @Override
        public String encryptMessage(String addressId, String plainText) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessage(this.nativeRef, addressId, plainText);
        }

        private native String native_encryptMessage(long _nativeRef, String addressId, String plainText);

        @Override
        public String encryptMessageSingleKey(String publicKey, String plainText) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessageSingleKey(this.nativeRef, publicKey, plainText);
        }

        private native String native_encryptMessageSingleKey(long _nativeRef, String publicKey,
                                                             String plainText);

        @Override
        public String decryptMessage(String encryptText, String passphras) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessage(this.nativeRef, encryptText, passphras);
        }

        private native String native_decryptMessage(long _nativeRef, String encryptText, String passphras);

        @Override
        public String decryptMessageSingleKey(String encryptText, String privateKey, String passphras) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessageSingleKey(this.nativeRef, encryptText, privateKey, passphras);
        }

        private native String native_decryptMessageSingleKey(long _nativeRef, String encryptText,
                                                             String privateKey, String passphras);

        @Override
        public EncryptPackage encryptAttachment(String addressId, byte[] unencryptData, String fileName) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptAttachment(this.nativeRef, addressId, unencryptData, fileName);
        }

        private native EncryptPackage native_encryptAttachment(long _nativeRef, String addressId,
                                                               byte[] unencryptData, String fileName);

        @Override
        public EncryptPackage encryptAttachmentSingleKey(String publicKey, byte[] unencryptData,
                                                         String fileName) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptAttachmentSingleKey(this.nativeRef, publicKey, unencryptData, fileName);
        }

        private native EncryptPackage native_encryptAttachmentSingleKey(long _nativeRef, String publicKey,
                                                                        byte[] unencryptData,
                                                                        String fileName);

        @Override
        public byte[] decryptAttachment(byte[] key, byte[] data, String passphras) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachment(this.nativeRef, key, data, passphras);
        }

        private native byte[] native_decryptAttachment(long _nativeRef, byte[] key, byte[] data,
                                                       String passphras);

        @Override
        public byte[] decryptAttachmentSingleKey(byte[] key, byte[] data, String privateKey,
                                                 String passphras) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachmentSingleKey(this.nativeRef, key, data, privateKey, passphras);
        }

        private native byte[] native_decryptAttachmentSingleKey(long _nativeRef, byte[] key, byte[] data,
                                                                String privateKey, String passphras);

        @Override
        public byte[] decryptAttachmentWithPassword(byte[] key, byte[] data, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachmentWithPassword(this.nativeRef, key, data, password);
        }

        private native byte[] native_decryptAttachmentWithPassword(long _nativeRef, byte[] key, byte[] data,
                                                                   String password);

        @Override
        public byte[] getPublicKeySessionKey(byte[] keyPackage, String passphrase) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPublicKeySessionKey(this.nativeRef, keyPackage, passphrase);
        }

        private native byte[] native_getPublicKeySessionKey(long _nativeRef, byte[] keyPackage,
                                                            String passphrase);

        @Override
        public byte[] getPublicKeySessionKeySingleKey(byte[] keyPackage, String privateKey,
                                                      String passphrase) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPublicKeySessionKeySingleKey(this.nativeRef, keyPackage, privateKey, passphrase);
        }

        private native byte[] native_getPublicKeySessionKeySingleKey(long _nativeRef, byte[] keyPackage,
                                                                     String privateKey, String passphrase);

        @Override
        public byte[] getSymmetricSessionKey(byte[] keyPackage, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSymmetricSessionKey(this.nativeRef, keyPackage, password);
        }

        private native byte[] native_getSymmetricSessionKey(long _nativeRef, byte[] keyPackage,
                                                            String password);

        @Override
        public byte[] getNewPublicKeyPackage(byte[] session, String publicKey) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNewPublicKeyPackage(this.nativeRef, session, publicKey);
        }

        private native byte[] native_getNewPublicKeyPackage(long _nativeRef, byte[] session,
                                                            String publicKey);

        @Override
        public byte[] getNewSymmetricKeyPackage(byte[] session, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNewSymmetricKeyPackage(this.nativeRef, session, password);
        }

        private native byte[] native_getNewSymmetricKeyPackage(long _nativeRef, byte[] session,
                                                               String password);

        @Override
        public String encryptMessageAes(String plainText, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessageAes(this.nativeRef, plainText, password);
        }

        private native String native_encryptMessageAes(long _nativeRef, String plainText, String password);

        @Override
        public String decryptMessageAes(String encryptedMessage, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessageAes(this.nativeRef, encryptedMessage, password);
        }

        private native String native_decryptMessageAes(long _nativeRef, String encryptedMessage,
                                                       String password);

        @Override
        public String encryptMailboxPwd(String unencryptedPwd, String salt) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMailboxPwd(this.nativeRef, unencryptedPwd, salt);
        }

        private native String native_encryptMailboxPwd(long _nativeRef, String unencryptedPwd, String salt);

        @Override
        public String decryptMailboxPwd(String encryptedPwd, String salt) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMailboxPwd(this.nativeRef, encryptedPwd, salt);
        }

        private native String native_decryptMailboxPwd(long _nativeRef, String encryptedPwd, String salt);

        @Override
        public String readClearsignedMessage(String signedMessage) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_readClearsignedMessage(this.nativeRef, signedMessage);
        }

        private native String native_readClearsignedMessage(long _nativeRef, String signedMessage);

        @Override
        public int throwAnException() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_throwAnException(this.nativeRef);
        }

        private native int native_throwAnException(long _nativeRef);

        @Override
        public String encryptHashCbc(String plainText, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptHashCbc(this.nativeRef, plainText, password);
        }

        private native String native_encryptHashCbc(long _nativeRef, String plainText, String password);

        @Override
        public String decryptHashCbc(String encryptedText, String password) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptHashCbc(this.nativeRef, encryptedText, password);
        }

        private native String native_decryptHashCbc(long _nativeRef, String encryptedText, String password);
    }
}
